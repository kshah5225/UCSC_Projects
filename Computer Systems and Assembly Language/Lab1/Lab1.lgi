41 2 0
38 1
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 90 44 0 \NUL
Shah, Kunal
22 8 96 59 76 0 \NUL
kgshah
22 64 272 264 252 0 \NUL
Part A Output                            
8 216 184 265 135 1 0
8 280 184 329 135 1 0
8 352 184 401 135 1 0
11 168 424 195 326 0 1
20 264 208 323 189 0
in_3
20 336 208 395 189 0
in_2
20 408 208 467 189 0
in_1
8 424 184 473 135 1 0
20 480 208 539 189 0
in_0
19 80 312 139 293 0
a_3
19 64 336 123 317 0
a_2
19 48 360 107 341 0
a_1
19 32 384 91 365 0
a_0
22 52 446 187 426 0 \NUL
This circut will show
22 403 426 696 406 0 \NUL
The Logic used to represent above signal is:
7 360 664 409 615 0 1
7 360 704 409 655 0 1
19 272 592 331 573 0
c_2
19 272 632 331 613 0
c_1
19 272 672 331 653 0
c_0
22 416 688 480 668 0 \NUL
SOP/POS
22 416 648 492 628 0 \NUL
NAND Only
22 416 608 484 588 0 \NUL
NOR Only
22 16 720 752 700 0 \NUL
The Logic Being applied above is in_0 and in_1 into an XOR gate and then that and in_2 are put into an XOR gate
22 280 32 653 12 0 \NUL
You are only permitted to modify or add text to this page.
22 280 56 605 36 0 \NUL
Your circuit must use senders and/or receivers to
22 280 80 538 60 0 \NUL
interface with these inputs and outputs.
7 472 360 521 311 0 1
7 544 360 593 311 0 1
7 616 360 665 311 0 1
19 416 392 475 373 0
b_2
19 488 392 547 373 0
b_1
19 560 392 619 373 0
b_0
7 360 624 409 575 0 1
22 64 136 620 116 0 \NUL
Input                                                                                                                                  
22 448 272 650 252 0 \NUL
Part B Output                            
22 272 552 473 532 0 \NUL
Part C Output                            
22 52 495 196 475 0 \NUL
as hex on the display
22 53 470 234 450 0 \NUL
the 4 bit binary input above
22 403 445 719 425 0 \NUL
-b_0 is always sent a signal of 0 through ground
22 403 464 706 444 0 \NUL
-b_1 is always sent a signal sent through in_0
22 403 483 701 463 0 \NUL
-b_2 is calculated wheather in_0 and in_1 are
22 403 502 592 482 0 \NUL
the same using an XOR gate
22 16 739 780 719 0 \NUL
This means the logic being applied is if in_0 and in_1 are the same or not and the reasult of that is either not inverted
22 16 758 504 738 0 \NUL
if in_2 is 0 ir it is inverted if in_2 is 1 by also checking if they are the same
1 470 159 481 198
1 409 198 398 159
1 337 198 326 159
1 265 198 262 159
1 169 390 136 302
1 169 396 120 326
1 169 402 104 350
1 169 408 88 374
1 328 622 361 639
1 328 662 361 679
1 472 382 473 335
1 544 382 545 335
1 616 382 617 335
1 328 582 361 599
38 2
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 90 44 0 \NUL
Shah, Kunal
22 8 96 59 76 0 \NUL
kgshah
19 32 216 91 197 0
in_3
19 32 240 91 221 0
in_2
19 32 264 91 245 0
in_1
19 32 288 91 269 0
in_0
20 125 216 184 197 0
a_3
20 125 240 184 221 0
a_2
20 125 264 184 245 0
a_1
20 125 288 184 269 0
a_0
22 35 180 200 160 0 \NUL
Part A Logic                     
22 35 318 170 298 0 \NUL
This circut will show
22 35 367 179 347 0 \NUL
as hex on the display
22 36 342 217 322 0 \NUL
the 4 bit binary input above
1 88 206 126 206
1 88 230 126 230
1 88 254 126 254
1 88 278 126 278
38 3
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 90 44 0 \NUL
Shah, Kunal
22 8 96 59 76 0 \NUL
kgshah
19 32 220 91 201 0
in_1
19 32 244 91 225 0
in_0
20 143 244 202 225 0
b_1
20 143 268 202 249 0
b_0
20 143 220 202 201 0
b_2
14 87 283 136 234
35 87 235 136 186 0 0
22 222 220 689 200 0 \NUL
B_2 is calculated by using an XOR gate with the inputs of in_! and  in_0
22 222 269 499 249 0 \NUL
b_0 is set to always show 0 or its off state
22 222 244 433 224 0 \NUL
B_1 is set to always match in_0
22 35 180 202 160 0 \NUL
Part B Logic                     
1 88 234 144 234
1 88 234 88 224
1 88 210 88 196
1 133 210 144 210
1 144 258 133 258
38 4
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 90 44 0 \NUL
Shah, Kunal
22 8 96 59 76 0 \NUL
kgshah
22 8 138 238 118 0 \NUL
Part C Logic (POS/SOP)                   
19 8 158 67 139 0
in_2
19 8 186 67 167 0
in_1
19 8 214 67 195 0
in_0
20 633 492 692 473 0
c_2
20 186 186 245 167 0
c_0
35 75 215 124 166 0 0
35 131 201 180 152 0 1
19 7 302 66 283 0
in_1
19 7 358 66 339 0
in_0
3 62 317 111 268 0 1
3 167 373 216 324 0 1
3 167 317 216 268 0 1
3 62 373 111 324 0 1
19 101 344 160 325 0
in_1
19 101 316 160 297 0
in_0
3 212 345 261 296 0 1
3 257 344 306 295 0 1
20 312 329 371 310 0
c_1(1-4)
19 373 302 432 283 0
in_2
19 373 358 432 339 0
c_1(1-4)
3 428 317 477 268 0 1
3 532 373 581 324 0 1
3 532 317 581 268 0 1
3 428 373 477 324 0 1
19 467 344 526 325 0
in_2
19 467 316 526 297 0
c_1(1-4)
3 577 345 626 296 0 1
20 632 330 691 311 0
c_1
22 7 268 225 248 0 \NUL
Part C Logic NAND ONLY             
22 7 428 217 408 0 \NUL
Part C Logic NOR ONLY             
19 6 518 65 499 0
in_0
4 62 477 111 428 0 1
4 62 533 111 484 0 1
19 101 504 160 485 0
in_1
19 101 476 160 457 0
in_0
4 167 477 216 428 0 1
4 167 533 216 484 0 1
4 212 505 261 456 0 1
20 313 490 372 471 0
c_2(1-4)
19 374 463 433 444 0
in_2
19 374 519 433 500 0
c_2(1-4)
4 257 505 306 456 0 1
19 468 505 527 486 0
in_2
19 468 477 527 458 0
c_2(1-4)
4 429 478 478 429 0 1
4 429 534 478 485 0 1
4 534 478 583 429 0 1
4 534 534 583 485 0 1
4 579 507 628 458 0 1
22 6 562 663 542 0 \NUL
Note: I refrained from using invert gates by using NOR or NAND gates with the same input and I used
22 6 581 639 561 0 \NUL
multiple inputs to ensure symmetry and prevent wires from crossing and causing confusion         
19 7 462 66 443 0
in_1
1 64 148 132 162
1 108 348 168 362
1 108 292 168 278
1 213 292 213 306
1 213 348 213 334
1 258 320 258 305
1 258 320 258 333
1 474 348 533 362
1 474 292 533 278
1 578 292 578 306
1 578 348 578 334
1 108 452 168 438
1 108 508 168 522
1 213 508 213 494
1 213 452 213 466
1 258 480 258 466
1 258 480 258 494
1 475 453 535 439
1 475 509 535 523
1 580 453 580 468
1 580 509 580 496
1 63 292 63 278
1 63 348 63 334
1 429 292 429 278
1 429 292 429 306
1 429 348 429 334
1 429 348 429 362
1 63 292 63 306
1 63 348 63 362
1 430 439 430 453
1 430 453 430 467
1 430 495 430 509
1 430 509 430 523
1 63 438 63 452
1 63 452 63 466
1 63 494 62 508
1 62 508 63 522
1 187 176 177 176
1 168 306 157 306
1 168 334 157 334
1 313 319 303 319
1 533 306 523 306
1 533 334 523 334
1 633 320 623 320
1 76 176 64 176
1 76 204 64 204
1 132 190 121 190
1 535 467 524 467
1 625 482 634 482
1 524 495 535 495
1 303 480 314 480
1 157 466 168 466
1 157 494 168 494
39 16777215
47 0
40 1 8 8
50 800 800
51 1 30
30
System
20
700
0
0
1
2
2
34
